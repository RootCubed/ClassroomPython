generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id           String  @id @default(uuid())
  userName     String  @unique
  passwordHash String?
  fullName     String
  role         Role

  oauth           OAuth?
  sessions        Session[]
  saves           Save[]
  submissions     Submission[]
  ownedCourses    Course[]         @relation("courseOwners")
  enrolledCourses Course[]         @relation("courseStudents")
  testcaseResults TestcaseResult[]
}

model OAuth {
  oauthId      String @id
  accessToken  String
  refreshToken String
  userId       String @unique
  user         User   @relation(fields: [userId], references: [id])
}

model Session {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Testcase {
  id             String @id @default(uuid())
  input          String
  expectedOutput String

  exercise        Exercise         @relation(fields: [exerciseId], references: [id])
  exerciseId      String
  testcaseResults TestcaseResult[]
}

model Exercise {
  id            String        @id @default(uuid())
  orderNum      Int           @default(autoincrement())
  title         String
  subtitle      String?
  description   String?
  codeTemplate  String
  exerciseGroup ExerciseGroup @relation(fields: [groupId], references: [id])
  groupId       String
  exerciseTags  ExerciseTag[]
  isInLibrary   Boolean
  testcases     Testcase[]

  saves       Save[]
  submissions Submission[]
}

model TestcaseResult {
  testcase   Testcase @relation(fields: [testcaseId], references: [id])
  testcaseId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  passed     Boolean

  @@id([testcaseId, userId])
}

model ExerciseTag {
  name      String     @id
  exercises Exercise[]
}

model ExerciseGroup {
  id    String @id @default(uuid())
  title String

  exercises Exercise[]

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([courseId, title])
}

model Course {
  id          String @id @default(uuid())
  title       String
  description String

  owners   User[] @relation("courseOwners")
  students User[] @relation("courseStudents")

  exercises ExerciseGroup[]
}

model Save {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  code       String

  @@id([userId, exerciseId])
}

model Submission {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  code       String
  timestamp  DateTime @default(now())
}
